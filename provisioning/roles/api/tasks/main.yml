---
 - name: checkout repository hspc_repo_api_mysql_project
   tags: [api, smart-platform]
   become_user: "{{username}}"
   git: repo="{{hspc_repos_base}}/{{hspc_repo_api_mysql_project}}"
        version="{{hspc_repo_api_branch}}"
        dest="{{install_dir}}/hspc/{{hspc_repo_api_mysql_project}}"
        update={{update_repositories}}
        force=yes

 - name: checkout repository hspc_repo_api_webapp_project
   tags: [api, smart-platform]
   become_user: "{{username}}"
   git: repo="{{hspc_repos_base}}/{{hspc_repo_api_webapp_project}}"
        version="{{hspc_repo_api_branch}}"
        dest="{{install_dir}}/hspc/{{hspc_repo_api_webapp_project}}"
        update={{update_repositories}}
        force=yes

 - name: configure api server service
   tags: [api, smart-platform]
   template: src=api-server.service.j2
             dest=/etc/systemd/system/api-server.service
             owner=root group=root mode=0644

 - name: enable api server service
   tags: [api, smart-platform]
   shell: systemctl enable api-server.service

 - name: reload systemd daemon
   tags: [api, smart-platform]
   shell: systemctl daemon-reload

 - name: stop api server
   tags: [api, smart-platform]
   service: name=api-server state=stopped

 - name: drop the api server database
   tags: [api, smart-platform]
   mysql_db: name={{api_server_database}} state=absent
   notify:
      - Restart MySQL

 - name: Drop the API Server Snapshot
   tags: [api, smart-platform]
   mysql_db: name="{{api_server_database}}${{baseline_snapshot}}" state=absent
   notify:
      - Restart MySQL

 - name: Create the API Server database
   tags: [api, smart-platform]
   mysql_db: name={{api_server_database}} state=present
   notify:
      - Restart MySQL

 - name: build hspc server API server
   tags: [api, smart-platform]
   become_user: "{{username}}"
   shell: chdir={{install_dir}}/hspc
        mvn clean install -e -f reference-api-webapp/pom.xml -Pjetty

 - name: restart api server
   tags: [api, smart-platform]
   service: name=api-server enabled=yes state=restarted

 - name: generate self-signed ssl certificate (api server)
   tags: [api, smart-platform]
   when: fhir_server_secure_http and not use_custom_ssl_certificates
   shell: creates=/etc/nginx/ssl/fhir.crt
          /bin/echo -e "{{fhir_server_ssl_country}}\n{{fhir_server_ssl_province}}\n{{fhir_server_ssl_locality}}\n{{fhir_server_ssl_organization}}\n{{fhir_server_ssl_division}}\n{{fhir_server_host}}\n{{fhir_server_ssl_email}}\n" | openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/nginx/ssl/fhir.key -out /etc/nginx/ssl/fhir.crt

 - name: import fhir server certificate in truststore (api server)
   tags: [api, smart-platform]
   when: fhir_server_secure_http
   shell: /bin/echo -e "{{keystore_password}}\nyes\n" | keytool
            -importcert -trustcacerts
            -alias fhir
            -file /etc/nginx/ssl/fhir.crt
            -keystore {{install_dir}}/keystore

 - name: configure nginx (api server)
   tags: [api, smart-platform]
   template: src=nginx_api.j2 dest=/etc/nginx/sites-enabled/default owner=root group=root mode=0644
   notify:
     - restart nginx

 # Create the API Server Sandbox
 - name: wait for api server to become available
   tags: [api, smart-platform]
   wait_for: port=9002

 - name: initialize sandbox
   tags: [api, smart-platform]
   uri:
     url: http://localhost:9002/sandbox
     method: PUT
     body: "{ 'teamId': '{{api_server_sandbox}}','schemaVersion': '{{hspc_schema_version}}','allowOpenAccess': true,'baselineDate': '{{ ansible_date_time.year }}-{{ ansible_date_time.month }}-{{ ansible_date_time.day }}' }"
     body_format: json
     HEADER_Content-Type: "application/json"

 # load the sample data
 - include: sample-data.yml

 - name: wait for api server to become available
   tags: [api, smart-platform]
   wait_for: port=9002

 # take a snapshot of the sandbox
 - include: snapshot-command.yml
   vars:
     snapshot_name: "{{ baseline_snapshot }}"
     snapshot_action: Take

 - meta: flush_handlers