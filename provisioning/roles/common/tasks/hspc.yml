- name: stop api server
  tags: [smart_on_fhir, reset_db]
  service: name=api-server state=stopped

- name: stop auth server
  tags: [smart_on_fhir, reset_db]
  service: name=auth-server state=stopped

- name: Drop the API Server database
  tags: [smart_on_fhir, reset_db]
  mysql_db: name={{api_server_database}} state=absent
  notify:
     - Restart MySQL

- name: Drop the Authorization Server database
  tags: [smart_on_fhir, reset_db]
  mysql_db: name={{auth_server_database}} state=absent
  notify:
     - Restart MySQL

- name: Create the API Server database
  tags: [smart_on_fhir, reset_db]
  mysql_db: name={{api_server_database}} state=present
  notify:
     - Restart MySQL

- name: Create the Authorization Server database
  tags: [smart_on_fhir, reset_db]
  mysql_db: name={{auth_server_database}} state=present
  notify:
     - Restart MySQL

- name: clear auth server data
  tags: [auth]
  file: path={{auth_server_db_file}}{{item}} state=absent
  when: not auth_server_preserve_db
  with_items: [".tmp", ".properties", ".script", ".log", ""]

- name: checkout hspc repositories
  tags: [smart_on_fhir, test]
  become_user: "{{username}}"
  git: repo={{hspc_repos_base}}/{{item.name}}
       version={{item.version}}
       dest={{install_dir}}/hspc/{{item.name}}
       update={{update_repositories}}
       force=yes
  with_items: '{{repositories}}'

- name: patch api server webapp
  become_user: "{{username}}"
  template: src=patches/application.yml.j2
            dest={{install_dir}}/hspc/reference-api-webapp/src/main/resources/application.yml

- name: patch auth server webapp
  become_user: "{{username}}"
  template: src=patches/auth.properties.j2
            dest={{install_dir}}/hspc/reference-auth-server-webapp/src/main/resources/config/auth.properties

- name: patch auth server ldap config
  become_user: "{{username}}"
  template: src=patches/ldap.properties.j2
            dest={{install_dir}}/hspc/reference-auth-server-ldap-webapp/src/main/resources/config/ldap.properties

- name: patch auth server mysql auth install
  become_user: "{{username}}"
  template: src=patches/mysql_auth_install.sql.j2
            dest={{install_dir}}/hspc/reference-auth-server-webapp/src/main/resources/db/openidconnect/mysql/mysql_auth_install.sql

- name: patch auth server clients rollback
  become_user: "{{username}}"
  template: src=patches/mysql_clients_rollback.sql.j2
            dest={{install_dir}}/hspc/reference-auth-server-webapp/src/main/resources/db/openidconnect/mysql/mysql_clients_rollback.sql

- name: patch auth server database tables
  become_user: "{{username}}"
  template: src=patches/mysql_database_tables.sql.j2
            dest={{install_dir}}/hspc/reference-auth-server-webapp/src/main/resources/db/openidconnect/mysql/mysql_database_tables.sql

- name: patch auth server scopes
  become_user: "{{username}}"
  template: src=patches/mysql_system_scopes.sql.j2
            dest={{install_dir}}/hspc/reference-auth-server-webapp/src/main/resources/db/openidconnect/mysql/mysql_system_scopes.sql

- name: patch auth server users
  become_user: "{{username}}"
  template: src=patches/mysql_users.sql.j2
            dest={{install_dir}}/hspc/reference-auth-server-webapp/src/main/resources/db/openidconnect/mysql/mysql_users.sql

- name: patch auth server clients
  become_user: "{{username}}"
  template: src=patches/mysql_clients.sql.j2
            dest={{install_dir}}/hspc/reference-auth-server-webapp/src/main/resources/db/openidconnect/mysql/mysql_clients.sql

- name: config company-logo.png
  copy: src=company-logo.png dest={{install_dir}}/hspc/reference-auth-server-ldap-webapp/src/main/webapp/static/images/company-logo.png

- name: config company-logo-main-web-top.png
  copy: src=company-logo-main-web-top.png dest={{install_dir}}/hspc/reference-auth-server-ldap-webapp/src/main/webapp/static/images/company-logo-main-web-top.png

- name: Load Authorization Server DB Schema and Sample Data
  tags: [smart_on_fhir, reset_db]
  shell: chdir={{install_dir}}/hspc/reference-auth-server-webapp/src/main/resources/db/openidconnect/mysql
         mysql oic < mysql_auth_install.sql

- name: Load Resource Server Client
  tags: [smart_on_fhir, reset_db]
  shell: chdir={{install_dir}}/hspc/reference-api-mysql/src/main/resources/db/openidconnect/mysql
         mysql oic < resource-server-client.sql

- name: build hspc server stack
  tags: [api]
  become_user: "{{username}}"
  shell: chdir={{install_dir}}/hspc
       mvn clean install -e -f reference-impl/pom.xml

- name: configure api server service
  tags: [smart_on_fhir, reset_db]
  template: src=api-server.service.j2
            dest=/etc/systemd/system/api-server.service
            owner=root group=root mode=0644

- name: configure auth server service
  tags: [auth]
  template: src=auth-server.service.j2
            dest=/etc/systemd/system/auth-server.service
            owner=root group=root mode=0644

- name: enable api server service
  tags: [docs-webhook]
  shell: systemctl enable api-server.service

- name: enable auth server service
  tags: [docs-webhook]
  shell: systemctl enable auth-server.service

- name: reload systemd daemon
  tags: [api]
  shell: systemctl daemon-reload

- name: restart api server
  tags: [smart_on_fhir, reset_db]
  service: name=api-server enabled=yes state=restarted

- name: restart auth server
  tags: [smart_on_fhir, reset_db]
  service: name=auth-server enabled=yes state=restarted

- name: generate self-signed ssl certificate (api server)
  tags: [api]
  when: fhir_server_secure_http and not use_custom_ssl_certificates
  shell: creates=/etc/nginx/ssl/fhir.crt
         /bin/echo -e "{{fhir_server_ssl_country}}\n{{fhir_server_ssl_province}}\n{{fhir_server_ssl_locality}}\n{{fhir_server_ssl_organization}}\n{{fhir_server_ssl_division}}\n{{fhir_server_host}}\n{{fhir_server_ssl_email}}\n" | openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/nginx/ssl/fhir.key -out /etc/nginx/ssl/fhir.crt

- name: import fhir server certificate in truststore (api server)
  tags: [api]
  when: fhir_server_secure_http
  shell: /bin/echo -e "{{keystore_password}}\nyes\n" | keytool
           -importcert -trustcacerts
           -alias fhir
           -file /etc/nginx/ssl/fhir.crt
           -keystore {{install_dir}}/keystore

- name: generate self-signed ssl certificate (auth server)
  tags: [auth]
  when: auth_server_secure_http and not use_custom_ssl_certificates
  shell: creates=/etc/nginx/ssl/auth.crt
         /bin/echo -e "{{auth_server_ssl_country}}\n{{auth_server_ssl_province}}\n{{auth_server_ssl_locality}}\n{{auth_server_ssl_organization}}\n{{auth_server_ssl_division}}\n{{auth_server_host}}\n{{auth_server_ssl_email}}\n" | openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/nginx/ssl/auth.key -out /etc/nginx/ssl/auth.crt

- name: import auth server certificate in truststore (auth server)
  tags: [auth]
  when: auth_server_secure_http
  shell: /bin/echo -e "{{keystore_password}}\nyes\n" | keytool
           -importcert -trustcacerts
           -alias auth
           -file /etc/nginx/ssl/auth.crt
           -keystore {{install_dir}}/keystore

- name: configure nginx (api server)
  tags: [api,nginx]
  template: src=nginx_default.j2 dest=/etc/nginx/sites-enabled/default owner=root group=root mode=0644
  notify:
    - restart nginx

- name: configure nginx (auth server)
  tags: [auth,nginx]
  template: src=nginx_auth.j2 dest=/etc/nginx/sites-enabled/auth owner=root group=root mode=0644
  notify:
    - restart nginx

- meta: flush_handlers
